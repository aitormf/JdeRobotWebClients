// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/Exception");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Ice/Identity");
    require("Ice/ProcessF");

    /**
     * This exception is raised if an adapter cannot be found.
     * 
     **/
    Ice.AdapterNotFoundException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "Ice::AdapterNotFoundException",
        undefined, undefined,
        false,
        false);

    /**
     * This exception is raised if the replica group provided by the
     * server is invalid.
     * 
     **/
    Ice.InvalidReplicaGroupIdException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "Ice::InvalidReplicaGroupIdException",
        undefined, undefined,
        false,
        false);

    /**
     * This exception is raised if a server tries to set endpoints for
     * an adapter that is already active.
     * 
     **/
    Ice.AdapterAlreadyActiveException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "Ice::AdapterAlreadyActiveException",
        undefined, undefined,
        false,
        false);

    /**
     * This exception is raised if an object cannot be found.
     * 
     **/
    Ice.ObjectNotFoundException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "Ice::ObjectNotFoundException",
        undefined, undefined,
        false,
        false);

    /**
     * This exception is raised if a server cannot be found.
     * 
     **/
    Ice.ServerNotFoundException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "Ice::ServerNotFoundException",
        undefined, undefined,
        false,
        false);

    /**
     * The Ice locator interface. This interface is used by clients to
     * lookup adapters and objects. It is also used by servers to get the
     * locator registry proxy.
     * 
     * <p class="Note">The {@link Locator} interface is intended to be used by
     * Ice internals and by locator implementations. Regular user code
     * should not attempt to use any functionality of this interface
     * directly.
     * 
     **/
    Ice.Locator = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Ice::Locator",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Ice.LocatorPrx = Slice.defineProxy(Ice.ObjectPrx, Ice.Locator.ice_staticId, undefined);

    Slice.defineOperations(Ice.Locator, Ice.LocatorPrx,
    {
        "findObjectById": [, 2, 1, 1, , [9], [[Ice.Identity]], , 
        [
            Ice.ObjectNotFoundException
        ], , ],
        "findAdapterById": [, 2, 1, 1, , [9], [[7]], , 
        [
            Ice.AdapterNotFoundException
        ], , ],
        "getRegistry": [, 2, 1, , , ["Ice.LocatorRegistryPrx"], , , , , ]
    });

    /**
     * The Ice locator registry interface. This interface is used by
     * servers to register adapter endpoints with the locator.
     * 
     * <p class="Note"> The {@link LocatorRegistry} interface is intended to be used
     * by Ice internals and by locator implementations. Regular user
     * code should not attempt to use any functionality of this interface
     * directly.
     * 
     **/
    Ice.LocatorRegistry = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Ice::LocatorRegistry",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Ice.LocatorRegistryPrx = Slice.defineProxy(Ice.ObjectPrx, Ice.LocatorRegistry.ice_staticId, undefined);

    Slice.defineOperations(Ice.LocatorRegistry, Ice.LocatorRegistryPrx,
    {
        "setAdapterDirectProxy": [, 2, 2, 1, , , [[7], [9]], , 
        [
            Ice.AdapterAlreadyActiveException,
            Ice.AdapterNotFoundException
        ], , ],
        "setReplicatedAdapterDirectProxy": [, 2, 2, 1, , , [[7], [7], [9]], , 
        [
            Ice.AdapterAlreadyActiveException,
            Ice.AdapterNotFoundException,
            Ice.InvalidReplicaGroupIdException
        ], , ],
        "setServerProcessProxy": [, 2, 2, 1, , , [[7], ["Ice.ProcessPrx"]], , 
        [
            Ice.ServerNotFoundException
        ], , ]
    });
    global.Ice = Ice;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
