// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Struct");
    require("Ice/EnumBase");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Ice/ObjectAdapterF");
    require("Ice/ConnectionF");
    require("Ice/Identity");
    require("Ice/Version");
    Slice.defineDictionary(Ice, "Context", "ContextHelper", "Ice.StringHelper", "Ice.StringHelper", false, false);

    /**
     * The {@link OperationMode} determines the retry behavior an
     * invocation in case of a (potentially) recoverable error.
     * 
     **/
    Ice.OperationMode = Slice.defineEnum({
        'Normal':0, 'Nonmutating':1, 'Idempotent':2});

    /**
     * Information about the current method invocation for servers. Each
     * operation on the server has a <tt>Current</tt> as its implicit final
     * parameter. <tt>Current</tt> is mostly used for Ice services. Most
     * applications ignore this parameter.
     * 
     **/
    Ice.Current = Slice.defineStruct(
        function(adapter, con, id, facet, operation, mode, ctx, requestId, encoding)
        {
            this.adapter = adapter !== undefined ? adapter : null;
            this.con = con !== undefined ? con : null;
            this.id = id !== undefined ? id : null;
            this.facet = facet !== undefined ? facet : null;
            this.operation = operation !== undefined ? operation : null;
            this.mode = mode !== undefined ? mode : Ice.Normal;
            this.ctx = ctx !== undefined ? ctx : null;
            this.requestId = requestId !== undefined ? requestId : 0;
            this.encoding = encoding !== undefined ? encoding : null;
        },
        false);
    global.Ice = Ice;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
