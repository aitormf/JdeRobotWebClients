// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Ice/ObjectAdapterF");
    require("Ice/Identity");
    require("Ice/Endpoint");

    /**
     * Base class providing access to the connection details.
     * 
     **/
    Ice.ConnectionInfo = Slice.defineLocalObject(
        function(incoming, adapterName, connectionId)
        {
            this.incoming = incoming !== undefined ? incoming : false;
            this.adapterName = adapterName !== undefined ? adapterName : null;
            this.connectionId = connectionId !== undefined ? connectionId : null;
        });

    /**
     * The user-level interface to a connection.
     * 
     **/
    Ice.Connection = Slice.defineLocalObject();

    /**
     * Provides access to the connection details of an IP connection
     * 
     **/
    Ice.IPConnectionInfo = Slice.defineLocalObject(
        function(incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort)
        {
            Ice.ConnectionInfo.call(this, incoming, adapterName, connectionId);
            this.localAddress = localAddress !== undefined ? localAddress : "";
            this.localPort = localPort !== undefined ? localPort : -1;
            this.remoteAddress = remoteAddress !== undefined ? remoteAddress : "";
            this.remotePort = remotePort !== undefined ? remotePort : -1;
        },
        Ice.ConnectionInfo);

    /**
     * Provides access to the connection details of a TCP connection
     * 
     **/
    Ice.TCPConnectionInfo = Slice.defineLocalObject(
        function(incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort)
        {
            Ice.IPConnectionInfo.call(this, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort);
        },
        Ice.IPConnectionInfo);

    /**
     * Provides access to the connection details of a UDP connection
     * 
     **/
    Ice.UDPConnectionInfo = Slice.defineLocalObject(
        function(incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort, mcastAddress, mcastPort)
        {
            Ice.IPConnectionInfo.call(this, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort);
            this.mcastAddress = mcastAddress !== undefined ? mcastAddress : null;
            this.mcastPort = mcastPort !== undefined ? mcastPort : -1;
        },
        Ice.IPConnectionInfo);
    global.Ice = Ice;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
