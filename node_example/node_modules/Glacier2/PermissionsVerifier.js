// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/Exception");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Glacier2/SSLInfo");
    
    var Glacier2 = global.Glacier2 || {};

    /**
     * This exception is raised if a client is denied the ability to create
     * a session with the router.
     * 
     * @see Router#createSession
     * @see Router#createSessionFromSecureConnection
     * 
     **/
    Glacier2.PermissionDeniedException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : null;
        },
        Ice.UserException,
        "Glacier2::PermissionDeniedException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        true,
        false);

    /**
     * The Glacier2 permissions verifier. This is called through the
     * process of establishing a session.
     * 
     * @see Router
     * 
     **/
    Glacier2.PermissionsVerifier = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::PermissionsVerifier",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.PermissionsVerifierPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.PermissionsVerifier.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.PermissionsVerifier, Glacier2.PermissionsVerifierPrx,
    {
        "checkPermissions": [, 2, 1, , 2, [1], [[7], [7]], [[7]], 
        [
            Glacier2.PermissionDeniedException
        ], , ]
    });

    /**
     * The SSL Glacier2 permissions verifier. This is called through the
     * process of establishing a session.
     * 
     * @see Router
     * 
     **/
    Glacier2.SSLPermissionsVerifier = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::SSLPermissionsVerifier",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.SSLPermissionsVerifierPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.SSLPermissionsVerifier.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.SSLPermissionsVerifier, Glacier2.SSLPermissionsVerifierPrx,
    {
        "authorize": [, 2, 1, , 2, [1], [[Glacier2.SSLInfo]], [[7]], 
        [
            Glacier2.PermissionDeniedException
        ], , ]
    });
    global.Glacier2 = Glacier2;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
