// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/EnumBase");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Ice/Identity");
    require("Ice/BuiltinSequences");
    require("IceGrid/Exception");
    
    var IceGrid = global.IceGrid || {};

    /**
     * Determines which load sampling interval to use.
     * 
     **/
    IceGrid.LoadSample = Slice.defineEnum({
        'LoadSample1':0, 'LoadSample5':1, 'LoadSample15':2});

    /**
     * The IceGrid query interface. This interface is accessible to
     * Ice clients who wish to look up well-known objects.
     * 
     **/
    IceGrid.Query = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceGrid::Query"
        ],
        -1, undefined, undefined, false);

    IceGrid.QueryPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Query.ice_staticId, undefined);

    Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx,
    {
        "findObjectById": [, 2, 1, , , [9], [[Ice.Identity]], , , , ],
        "findObjectByType": [, 2, 1, , , [9], [[7]], , , , ],
        "findObjectByTypeOnLeastLoadedNode": [, 2, 1, , , [9], [[7], [IceGrid.LoadSample.__helper]], , , , ],
        "findAllObjectsByType": [, 2, 1, , , ["Ice.ObjectProxySeqHelper"], [[7]], , , , ],
        "findAllReplicas": [, 2, 2, , , ["Ice.ObjectProxySeqHelper"], [[9]], , , , ]
    });
    global.IceGrid = IceGrid;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
