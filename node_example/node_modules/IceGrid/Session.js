// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Glacier2/Session");
    
    var Glacier2 = global.Glacier2 || {};
    require("IceGrid/Exception");
    
    var IceGrid = global.IceGrid || {};

    /**
     * A session object is used by IceGrid clients to allocate and
     * release objects. Client sessions are either created with the
     * {@link Registry} object or the registry client {@link Glacier2.SessionManager}
     * object.
     * 
     * @see Registry
     * @see Glacier2.SessionManager
     * 
     **/
    IceGrid.Session = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.Session
        ], 2,
        [
            "::Glacier2::Session",
            "::Ice::Object",
            "::IceGrid::Session"
        ],
        -1, undefined, undefined, false);

    IceGrid.SessionPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Session.ice_staticId, [
        Glacier2.SessionPrx]);

    Slice.defineOperations(IceGrid.Session, IceGrid.SessionPrx,
    {
        "keepAlive": [, 2, 2, , , , , , , , ],
        "allocateObjectById": [, , , 1, , [9], [[Ice.Identity]], , 
        [
            IceGrid.AllocationException,
            IceGrid.ObjectNotRegisteredException
        ], , ],
        "allocateObjectByType": [, , , 1, , [9], [[7]], , 
        [
            IceGrid.AllocationException
        ], , ],
        "releaseObject": [, , , , , , [[Ice.Identity]], , 
        [
            IceGrid.AllocationException,
            IceGrid.ObjectNotRegisteredException
        ], , ],
        "setAllocationTimeout": [, 2, 2, , , , [[3]], , , , ]
    });
    global.IceGrid = IceGrid;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
