// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `UserAccountMapper.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/Exception");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    var IceGrid = global.IceGrid ||  {};

    /**
     * This exception is raised if a user account for a given session
     * identifier can't be found.
     * 
     **/
    IceGrid.UserAccountNotFoundException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "IceGrid::UserAccountNotFoundException",
        undefined, undefined,
        false,
        false);

    /**
     * A user account mapper object is used by IceGrid nodes to map
     * session identifiers to user accounts.
     * 
     **/
    IceGrid.UserAccountMapper = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceGrid::UserAccountMapper"
        ],
        -1, undefined, undefined, false);

    IceGrid.UserAccountMapperPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.UserAccountMapper.ice_staticId, undefined);

    Slice.defineOperations(IceGrid.UserAccountMapper, IceGrid.UserAccountMapperPrx,
    {
        "getUserAccount": [, , , , , [7], [[7]], , 
        [
            IceGrid.UserAccountNotFoundException
        ], , ]
    });
    global.IceGrid = IceGrid;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
