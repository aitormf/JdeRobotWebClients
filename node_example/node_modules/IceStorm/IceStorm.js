// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(global, r)
{
    var require = typeof(r) === "function" ? r : function(){};
    require("Ice/Object");
    require("Ice/ObjectPrx");
    require("Ice/Operation");
    require("Ice/Struct");
    require("Ice/Exception");
    require("Ice/Long");
    require("Ice/HashMap");
    require("Ice/HashUtil");
    require("Ice/ArrayUtil");
    require("Ice/StreamHelpers");
    
    var Ice = global.Ice || {};
    require("Ice/Identity");
    require("Ice/SliceChecksumDict");
    require("IceStorm/Metrics");
    
    var IceMX = global.IceMX || {};
    var IceStorm = global.IceStorm ||  {};

    /**
     * Information on the topic links.
     * 
     **/
    IceStorm.LinkInfo = Slice.defineStruct(
        function(theTopic, name, cost)
        {
            this.theTopic = theTopic !== undefined ? theTopic : null;
            this.name = name !== undefined ? name : null;
            this.cost = cost !== undefined ? cost : 0;
        },
        false,
        function(__os)
        {
            IceStorm.TopicPrx.write(__os, this.theTopic);
            __os.writeString(this.name);
            __os.writeInt(this.cost);
        },
        function(__is)
        {
            this.theTopic = IceStorm.TopicPrx.read(__is);
            this.name = __is.readString();
            this.cost = __is.readInt();
        },
        7, 
        false);
    Slice.defineSequence(IceStorm, "LinkInfoSeqHelper", "IceStorm.LinkInfo", false);
    Slice.defineDictionary(IceStorm, "QoS", "QoSHelper", "Ice.StringHelper", "Ice.StringHelper", false, false);

    /**
     * This exception indicates that an attempt was made to create a link
     * that already exists.
     * 
     **/
    IceStorm.LinkExists = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : null;
        },
        Ice.UserException,
        "IceStorm::LinkExists",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * This exception indicates that an attempt was made to remove a
     * link that does not exist.
     * 
     **/
    IceStorm.NoSuchLink = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : null;
        },
        Ice.UserException,
        "IceStorm::NoSuchLink",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * This exception indicates that an attempt was made to subscribe
     * a proxy for which a subscription already exists.
     * 
     **/
    IceStorm.AlreadySubscribed = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "IceStorm::AlreadySubscribed",
        undefined, undefined,
        false,
        false);

    /**
     * This exception indicates that a subscription failed due to an
     * invalid QoS.
     * 
     **/
    IceStorm.BadQoS = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : null;
        },
        Ice.UserException,
        "IceStorm::BadQoS",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * Publishers publish information on a particular topic. A topic
     * logically represents a type.
     * 
     * @see TopicManager
     * 
     **/
    IceStorm.Topic = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceStorm::Topic"
        ],
        -1, undefined, undefined, false);

    IceStorm.TopicPrx = Slice.defineProxy(Ice.ObjectPrx, IceStorm.Topic.ice_staticId, undefined);

    Slice.defineOperations(IceStorm.Topic, IceStorm.TopicPrx,
    {
        "getName": [, 2, 1, , , [7], , , , , ],
        "getPublisher": [, 2, 1, , , [9], , , , , ],
        "getNonReplicatedPublisher": [, 2, 1, , , [9], , , , , ],
        "subscribe": [, , , , , , [["IceStorm.QoSHelper"], [9]], , , , ],
        "subscribeAndGetPublisher": [, , , , , [9], [["IceStorm.QoSHelper"], [9]], , 
        [
            IceStorm.AlreadySubscribed,
            IceStorm.BadQoS
        ], , ],
        "unsubscribe": [, 2, 2, , , , [[9]], , , , ],
        "link": [, , , , , , [["IceStorm.TopicPrx"], [3]], , 
        [
            IceStorm.LinkExists
        ], , ],
        "unlink": [, , , , , , [["IceStorm.TopicPrx"]], , 
        [
            IceStorm.NoSuchLink
        ], , ],
        "getLinkInfoSeq": [, 2, 1, , , ["IceStorm.LinkInfoSeqHelper"], , , , , ],
        "getSubscribers": [, , , , , ["Ice.IdentitySeqHelper"], , , , , ],
        "destroy": [, , , , , , , , , , ]
    });
    Slice.defineDictionary(IceStorm, "TopicDict", "TopicDictHelper", "Ice.StringHelper", "IceStorm.TopicPrx", false, false);

    /**
     * This exception indicates that an attempt was made to create a topic
     * that already exists.
     * 
     **/
    IceStorm.TopicExists = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : null;
        },
        Ice.UserException,
        "IceStorm::TopicExists",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * This exception indicates that an attempt was made to retrieve a
     * topic that does not exist.
     * 
     **/
    IceStorm.NoSuchTopic = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : null;
        },
        Ice.UserException,
        "IceStorm::NoSuchTopic",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * A topic manager manages topics, and subscribers to topics.
     * 
     * @see Topic
     * 
     **/
    IceStorm.TopicManager = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceStorm::TopicManager"
        ],
        -1, undefined, undefined, false);

    IceStorm.TopicManagerPrx = Slice.defineProxy(Ice.ObjectPrx, IceStorm.TopicManager.ice_staticId, undefined);

    Slice.defineOperations(IceStorm.TopicManager, IceStorm.TopicManagerPrx,
    {
        "create": [, , , , , ["IceStorm.TopicPrx"], [[7]], , 
        [
            IceStorm.TopicExists
        ], , ],
        "retrieve": [, 2, 1, , , ["IceStorm.TopicPrx"], [[7]], , 
        [
            IceStorm.NoSuchTopic
        ], , ],
        "retrieveAll": [, 2, 1, , , ["IceStorm.TopicDictHelper"], , , , , ],
        "getSliceChecksums": [, 2, 1, , , ["Ice.SliceChecksumDictHelper"], , , , , ]
    });
    global.IceStorm = IceStorm;
}
(typeof (global) === "undefined" ? window : global, typeof (require) === "undefined" ? undefined : require));
